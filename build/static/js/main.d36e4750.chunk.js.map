{"version":3,"sources":["Config/firebase.js","Components/SidebarChat/SidebarChat.js","Datalayer/StateProvider.js","Datalayer/reducer.js","Components/Sidebar/Sidebar.js","Components/Chats/Chat.js","Components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","addNewChat","id","name","useState","seed","setSeed","messages","setMessages","open","setOpen","input","setInput","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","handleClose","Modal","onClose","aria-labelledby","aria-describedby","className","TextField","variant","placeholder","value","onChange","e","target","Button","onClick","preventDefault","add","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","useReducer","useStateValue","useContext","actionType","state","action","type","user","mode","Sidebar","rooms","setRooms","dispatch","search","setSearch","checked","setChecked","history","useHistory","unsubscribe","filteredRoom","filter","room","includes","toLowerCase","photoURL","IconButton","Switch","inputProps","push","key","Chat","ref","useRef","roomId","useParams","roomName","setRoomName","length","Date","timestamp","toDate","toUTCString","index","displayName","FieldValue","serverTimestamp","current","scrollTo","scrollHeight","Login","alt","signInWithPopup","then","result","catch","err","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.d36e4750.chunk.js","sourcesContent":["import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBRz4Mnuda5e0b--UXWdY7sdeArPp-kmzI\",\n  authDomain: \"whatsappclone-64d35.firebaseapp.com\",\n  databaseURL: \"https://whatsappclone-64d35-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"whatsappclone-64d35\",\n  storageBucket: \"whatsappclone-64d35.appspot.com\",\n  messagingSenderId: \"93298574533\",\n  appId: \"1:93298574533:web:8f78cc4055df890b101cac\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider(); //for auth signup\n\nexport { auth, provider };\nexport default db;\n","import React, { useEffect, useState } from \"react\";\nimport { Avatar, TextField, Button } from \"@material-ui/core\";\nimport \"./SidebarChat.css\";\nimport db from \"../../Config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport Modal from \"@material-ui/core/Modal\";\nconst SidebarChat = ({ addNewChat, id, name }) => {\n  const [seed, setSeed] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [input, setInput] = useState(\"\");\n  useEffect(() => {\n    //for getting the last message that was sent\n    if (id) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot(snapshot =>\n          setMessages(snapshot.docs.map(doc => doc.data()))\n        );\n    }\n  }, [id]);\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const createChat = e => {\n    e.preventDefault();\n    if (input) {\n      //do some stuffs in db\n      db.collection(\"rooms\").add({\n        name: input\n      });\n      setInput(\"\");\n      handleClose();\n    }\n  };\n  return !addNewChat ? (\n    <Link to={`/rooms/${id}`}>\n      <div className=\"sidebarChat\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"sidebarChat__info\">\n          <h2>{name}</h2>\n          <p>{messages[0]?.message}</p>\n        </div>\n      </div>\n    </Link>\n  ) : (\n    <>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        className=\"sidebarChat__modal\"\n      >\n        <div className=\"sidebarChat__modalContainer\">\n          <h1>Add a New Chat</h1>\n          <TextField\n            variant=\"outlined\"\n            placeholder=\"Enter room name\"\n            value={input}\n            onChange={e => setInput(e.target.value)}\n          />\n          <Button onClick={createChat}>Create</Button>\n        </div>\n      </Modal>\n      <div className=\"sidebarChat\" onClick={handleOpen}>\n        <h2>Add New Chat</h2>\n      </div>\n    </>\n  );\n};\n\nexport default SidebarChat;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => {\n  return (\n    //   setup the data layer\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport const useStateValue = () => useContext(StateContext); //pull the data from the data layer\n","export const initialState = {\n  user: null,\n  mode: true\n};\n\nexport const actionType = {\n  SET_USER: \"SET_USER\",\n  SET_MODE: \"SET_MODE\"\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case actionType.SET_USER:\n      return {\n        ...state,\n        user: action.user\n      };\n    case actionType.SET_MODE:\n      return {\n        ...state,\n        mode: action.mode\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport { Avatar, IconButton, Button } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\nimport SidebarChat from \"../SidebarChat/SidebarChat\";\nimport db from \"../../Config/firebase\";\nimport { useStateValue } from \"../../Datalayer/StateProvider\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { actionType } from \"../../Datalayer/reducer\";\nimport { useHistory } from \"react-router-dom\";\nconst Sidebar = () => {\n  const [rooms, setRooms] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n  const [search, setSearch] = useState(\"\");\n  const [checked, setChecked] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    const unsubscribe = db.collection(\"rooms\").onSnapshot(snapshot => {\n      setRooms(\n        snapshot.docs.map(doc => {\n          return {\n            id: doc.id,\n            data: doc.data()\n          };\n        })\n      );\n    });\n    return () => {\n      unsubscribe(); //to perform the cleanup actions\n    };\n  }, []);\n  const filteredRoom = rooms.filter(room => {\n    return room.data.name.includes(search.toLowerCase());\n  });\n\n  const handleChange = () => {\n    setChecked(!checked);\n    dispatch({\n      type: actionType.SET_MODE,\n      mode: checked\n    });\n  };\n  const logout = () => {\n    dispatch({\n      type: actionType.SET_USER,\n      user: null\n    });\n    history.push(\"/\");\n  };\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar src={user?.photoURL} />\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar__callToAction\">\n        <div className=\"sidebar__callToActionLeft\">\n          <p>{`${checked ? \"Disable\" : \"Enable\"} Dark Mode`}</p>\n          <Switch\n            checked={checked}\n            onChange={handleChange}\n            name=\"checkedA\"\n            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n          />\n        </div>\n        <Button onClick={logout}>Logout</Button>\n      </div>\n\n      <div className=\"sidebar_search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchOutlinedIcon />\n          <input\n            placeholder=\"Search or Start new Chat\"\n            value={search}\n            onChange={e => setSearch(e.target.value)}\n            type=\"text\"\n          />\n        </div>\n      </div>\n      <div className=\"sidebar__chats\">\n        <SidebarChat addNewChat />\n        {filteredRoom.map(room => {\n          return (\n            <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\nimport AttachFileOutlinedIcon from \"@material-ui/icons/AttachFileOutlined\";\nimport MoreVertOutlinedIcon from \"@material-ui/icons/MoreVertOutlined\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { useParams } from \"react-router-dom\";\nimport db from \"../../Config/firebase\";\nimport { useStateValue } from \"../../Datalayer/StateProvider\";\nimport firebase from \"firebase\";\nconst Chat = () => {\n  const [{ user }, dispatch] = useStateValue();\n  const [seed, setSeed] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const ref = useRef(null);\n\n  const { roomId } = useParams(); // getting the parameter passed as a url\n\n  const [roomName, setRoomName] = useState(\"\");\n\n  const [messages, setMessages] = useState([]); //for storing a messages or chats\n  useEffect(() => {\n    //   to render the chat based on the roomid provided as a url params and run for each roomId changes\n    if (roomId) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .onSnapshot(snapshot => setRoomName(snapshot.data().name));\n\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot(snapshot => {\n          setMessages(snapshot.docs.map(doc => doc.data()));\n        });\n    }\n  }, [roomId]);\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, [roomId]);\n  const sendMessage = e => {\n    e.preventDefault();\n    if (input) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .add({\n          message: input,\n          name: user.displayName,\n          timestamp: firebase.firestore.FieldValue.serverTimestamp()\n          // to add the timestamp of the server time\n        });\n      setInput(\"\");\n      ref.current.scrollTo(0, ref.current.scrollHeight + 100);\n    }\n  };\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"chat__headerInfo\">\n          <h3>{roomName}</h3>\n          {/* the last seen is implemented by checking the time of the last message from the chat */}\n          <p>\n            {messages.length !== 0\n              ? new Date(\n                  messages[messages.length - 1]?.timestamp?.toDate()\n                ).toUTCString()\n              : \"\"}\n          </p>\n        </div>\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <SearchOutlinedIcon />\n          </IconButton>\n          <IconButton>\n            <AttachFileOutlinedIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertOutlinedIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"chat__body\" ref={ref}>\n        {messages.map((message, index) => {\n          return (\n            <p\n              className={`chat__message ${\n                message.name === user.displayName && \"chat__receiver\"\n                //to check if the messaging user is same as the logged in user then it //////will be on right side\n              }`}\n              key={index}\n            >\n              <span className=\"chat__name\">{message.name}</span>\n              {message.message}\n              <br></br>\n              <span className=\"chat__timestamp\">\n                {new Date(message.timestamp?.toDate()).toUTCString()}\n              </span>\n            </p>\n          );\n        })}\n      </div>\n      <div className=\"chat__footer\">\n        <InsertEmoticonIcon />\n        <form>\n          <input\n            type=\"text\"\n            value={input}\n            onChange={e => setInput(e.target.value)}\n            placeholder=\"Send Message\"\n          />\n          <button onClick={sendMessage}>Send a message</button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"../../Config/firebase\";\nimport { useStateValue } from \"../../Datalayer/StateProvider\";\nimport { actionType } from \"../../Datalayer/reducer\";\nconst Login = () => {\n  const [{}, dispatch] = useStateValue();\n  const signIn = e => {\n    e.preventDefault();\n    //   before this enable the authentication in your firebase and select the google //method\n\n    // signin with the auth protocol\n    auth\n      .signInWithPopup(provider)\n      .then(result => {\n        dispatch({\n          // dispatches the data into data layer after login\n          type: actionType.SET_USER,\n          user: result.user\n        });\n      })\n      .catch(err => alert(err.message));\n  };\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <img\n          src=\"https://pngimg.com/uploads/whatsapp/whatsapp_PNG20.png\"\n          alt=\"logo\"\n        />\n        <div className=\"login__text\">\n          <h1>Sign in to WhatsApp</h1>\n        </div>\n        <Button type=\"submit\" onClick={signIn}>\n          Sign in With Google\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport ReactDOM from \"react-dom\"\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Chat from \"./Components/Chats/Chat\";\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Login from \"./Components/Login/Login\";\nimport { useStateValue } from \"./Datalayer/StateProvider\";\nfunction App() {\n  const [{ user, mode }, dispatch] = useStateValue();\n  return (  \n    <div className={`${mode ? \"app\" : \"night\"}`}>\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              {/* render the chats based on the id */}\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./Datalayer/StateProvider\";\nimport reducer, { initialState } from \"./Datalayer/reducer\";\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}